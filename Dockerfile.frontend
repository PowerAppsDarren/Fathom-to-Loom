# Multi-stage Dockerfile for Fathom-to-Loom Frontend
# This builds the Dioxus frontend and serves it with Nginx

#=============================================================================
# Stage 1: Rust Build Environment for Dioxus
#=============================================================================
FROM rust:1.81-slim AS chef
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    wget \
    && rm -rf /var/lib/apt/lists/*
RUN cargo install cargo-chef
# RUN cargo install dioxus-cli --version 0.5.7  # Temporarily commented out due to edition2024 issue
WORKDIR /app

#=============================================================================
# Stage 2: Prepare Recipe
#=============================================================================
FROM chef AS planner
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

#=============================================================================
# Stage 3: Build Dependencies
#=============================================================================
FROM chef AS builder
COPY --from=planner /app/recipe.json recipe.json
# Build dependencies - this is the caching Docker layer!
RUN cargo chef cook --release --recipe-path recipe.json

# Install wasm32 target for WebAssembly compilation
RUN rustup target add wasm32-unknown-unknown

# Copy source code
COPY . .

# Build the frontend with Dioxus using cargo
WORKDIR /app/frontend
RUN cargo build --release --target wasm32-unknown-unknown
# Create a basic dist directory structure
RUN mkdir -p dist && echo '<!DOCTYPE html><html><head><title>Fathom-to-Loom</title></head><body><h1>Frontend Under Construction</h1><p>Backend services are running.</p></body></html>' > dist/index.html

#=============================================================================
# Stage 4: Development Server (for development profile)
#=============================================================================
FROM chef AS dev
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --recipe-path recipe.json

# Install wasm32 target
RUN rustup target add wasm32-unknown-unknown

# Copy source code
COPY . .

WORKDIR /app/frontend

# Expose Dioxus dev server port
EXPOSE 8080

# Health check for dev server
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080 || exit 1

# Development command - serve a simple message for now
CMD ["sh", "-c", "echo 'Frontend development server - Backend services available' && sleep infinity"]

#=============================================================================
# Stage 5: Production Nginx Server
#=============================================================================
FROM nginx:alpine AS runtime

# Install wget for health checks
RUN apk add --no-cache wget

# Copy built frontend from builder stage
COPY --from=builder /app/frontend/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy frontend assets if they exist
# RUN test -d /app/frontend/assets && cp -r /app/frontend/assets/* /usr/share/nginx/html/ || true

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:80 || exit 1

# Default nginx command
CMD ["nginx", "-g", "daemon off;"]
